trigger phrases: "can you play me a video on Youtube", "open YouTube", "search YouTube", "can you search the web for", "look up the weather in..."

## Web Browsing
Prefer `selenium`.

**IMPORTANT NOTE:** `webdriver_manager` is no longer required to use `selenium`. NEVER INSTALL `webdriver_manager`. Simply use `driver = selenium.webdriver.Chrome()`

To locate elements on a page:

```
from selenium.webdriver.common.by import By
driver.find_element(By.XPATH, '//button[text()="Some text"]')
driver.find_elements(By.XPATH, '//button')
```

Attributes available for By class:

```
ID = "id"
NAME = "name"
XPATH = "xpath"
LINK_TEXT = "link text"
PARTIAL_LINK_TEXT = "partial link text"
TAG_NAME = "tag name"
CLASS_NAME = "class name"
CSS_SELECTOR = "css selector"
```

With the constraint that you don't have access to any visual tools, here's how you can approach browsing an unknown website:

```python
# Wait for JavaScript to load, looking for a common element like body
WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.TAG_NAME, 'body')))
# Find all elements in the body
body = driver.find_element(By.TAG_NAME, 'body')
all_elements = body.find_elements(By.XPATH, ".//*")
# Iterate through all elements and print the important ones
for element in all_elements:
    tag_name = element.tag_name.lower()
    # Print input fields
    if tag_name == 'input':
        print(f"Input - Type: {element.get_attribute('type')}, Name: {element.get_attribute('name')}")
    # Print buttons
    elif tag_name == 'button':
        print(f"Button - Text: {element.text}")
    # Print links
    elif tag_name == 'a':
        print(f"Link - Href: {element.get_attribute('href')}")
    # Print headings
    elif tag_name in ['h1', 'h2', 'h3', 'h4', 'h5', 'h6']:
        print(f"Heading ({tag_name.upper()}) - {element.text}")
```